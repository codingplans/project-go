import hashlib
import pickle

import pandas as pd


def pickleShow():
    record = '800495b0000000000000008c156e756d70792e636f72652e6d756c74696172726179948c0c5f7265636f6e7374727563749493948c056e756d7079948c076e6461727261799493944b0085944301629487945294284b014b05859468038c0564747970659493948c02663894898887945294284b038c013c944e4e4e4affffffff4affffffff4b00749462894328000000000000f03f000000000000f03f0000000000000000000000000000f03f0000000018bc1041947494622e'
    # record = '800495a0000000000000008c156e756d70792e636f72652e6d756c74696172726179948c0c5f7265636f6e7374727563749493948c056e756d7079948c076e6461727261799493944b0085944301629487945294284b014b03859468038c0564747970659493948c02663894898887945294284b038c013c944e4e4e4affffffff4affffffff4b0074946289431814ae47e11cd10641000000000000000014ae47e11cd10641947494622e'
    df_from_db = pickle.loads(bytes.fromhex(record))
    # import numpy as np
    # np.set_printoptions(precision=4,  # 小数点后位数
    #                     suppress=True,  # 不以科学计数法打印
    #                     linewidth=100,  # 每行最多显示字符数
    #                     threshold=1000)
    df = pd.DataFrame(df_from_db)
    print(df)
    print(df_from_db)

pickleShow()


def pickleValue():
    # 示例 DataFrame
    data = {'Name': ['Alice', 'Bob', 'Charlie'],
            'Age': [25, 30, 35],
            'City': ['New York', 'Los Angeles', 'Chicago']}
    df = pd.DataFrame(data)
    # 序列化 DataFrame 到文件 'df.pkl'
    with open('df.pkl', 'wb') as file:
        pickle.dump(df, file)
    # 从文件 'df.pkl' 中反序列化 DataFrame
    with open('df.pkl', 'rb') as file:
        loaded_df = pickle.load(file)

    # print(loaded_df)
    files = "\x80049574050000000000008c1170616e6461732e636f72652e6672616d65948c09446174614672616d659493942981947d94288c045f6d6772948c1e70616e6461732e636f72652e696e7465726e616c732e6d616e6167657273948c0c426c6f636b4d616e61676572949394288c1670616e6461732e5f6c6962732e696e7465726e616c73948c0f5f756e7069636b6c655f626c6f636b9493948c1370616e6461732e5f6c6962732e617272617973948c1c5f5f7079785f756e7069636b6c655f4e4441727261794261636b65649493948c1c70616e6461732e636f72652e6172726179732e6461746574696d6573948c0d4461746574696d6541727261799493944a1f06f1044e879452948c056e756d7079948c0564747970659493948c024d3894898887945294284b048c013c944e4e4e4affffffff4affffffff4b007d942843026e73944b014b014b01749486947494628c156e756d70792e636f72652e6d756c74696172726179948c0c5f7265636f6e73747275637494939468148c076e6461727261799493944b0085944301629487945294284b014b024b0286946819894320008c89e78f4ed017008c89e78f4ed0176081538e924ed017c08c168d924ed017947494627d948c055f66726571944e738794628c086275696c74696e73948c05736c6963659493944b004b0a4b05879452944b0287945294680b682268244b008594682687945294284b014b034b02869468168c02693894898887945294284b03681a4e4e4e4affffffff4affffffff4b00749462894330dd06000000000000dd06000000000000010000000000000001000000000000004400000000000000430000000000000094749462682268244b008594682687945294284b014b038594683c894318010000000000000002000000000000000600000000000000947494624b0287945294680b682268244b008594682687945294284b014b034b02869468168c024f3894898887945294284b038c017c944e4e4e4affffffff4affffffff4b3f749462895d94288c2430343a33365d2c6f3d4c674c7265706f7265706f7265706f7265706f6f6753747265616d948c1d30343a33365d2c6f3d4c674c6f6753252525252525252525747265616d948c17623531333132333132332d31362e73683a33333a333131948c1e6235313331327265706f7265706f7265706f7265706f683a33333a333131948c056572726f72948c077761726e696e679465749462682268244b008594682687945294284b014b038594683c894318030000000000000004000000000000000700000000000000947494624b0287945294680b682268244b008594682687945294284b014b014b028694684e895d94288c085a5a59737265616d9468666574946268314b084b094b01879452944b028794529474945d94288c1870616e6461732e636f72652e696e64657865732e62617365948c0a5f6e65775f496e646578949394686e8c05496e6465789493947d94288c046461746194682268244b008594682687945294284b014b098594684e895d94288c0f6c6f675f7570646174655f74696d65948c086275696c645f6964948c0b6c6f675f66696c655f6964948c076c6f675f6d7367948c0c6572726f725f736f75726365948c0b7570646174655f74696d65948c026964948c096c6f675f6c6576656c948c097265706f5f6e616d6594657494628c046e616d65944e7586945294687068727d94286874682268244b008594682687945294284b014b028594683c894310000000000000000001000000000000009474946268844e758694529465869452948c045f747970948c09646174616672616d65948c095f6d65746164617461945d948c056174747273947d948c065f666c616773947d948c17616c6c6f77735f6475706c69636174655f6c6162656c7394887375622e"

    serialized_data = files
    serialized_data_bytes = serialized_data.encode('utf-8')
    # 将从数据库中读取的二进制数据反序列化
    with open('temp.pkl', 'wb') as temp_file:  # 创建一个临时文件来存储序列化的数据
        temp_file.write(serialized_data_bytes)  # 将数据库中读取的数据写入文件

    # 现在你可以使用 pickle 加载这个临时文件
    with open('temp.pkl', 'rb') as file:
        loaded_df = pickle.load(file)

    # 打印反序列化后的 DataFrame
    print(loaded_df)
    # loaded_dfs = pickle.load(str(files))
    # print(loaded_dfs)


# pickleValue()

def hashStr():
    var1 = "11"
    var2 = "22"
    var3 = "33"
    # 将变量转换为字符串，然后拼接起来
    variables_str = str(var1) + str(var2) + str(var3)

    variables_str = str(
        '175780049574050000000000008c1170616e6461732e636f72652e6672616d65948c09446174614672616d659493942981947d94288c045f6d6772948c1e70616e6461732e636f72652e696e7465726e616c732e6d616e6167657273948c0c426c6f636b4d616e61676572949394288c1670616e6461732e5f6c6962732e696e7465726e616c73948c0f5f756e7069636b6c655f626c6f636b9493948c1370616e6461732e5f6c6962732e617272617973948c1c5f5f7079785f756e7069636b6c655f4e4441727261794261636b65649493948c1c70616e6461732e636f72652e6172726179732e6461746574696d6573948c0d4461746574696d6541727261799493944a1f06f1044e879452948c056e756d7079948c0564747970659493948c024d3894898887945294284b048c013c944e4e4e4affffffff4affffffff4b007d942843026e73944b014b014b01749486947494628c156e756d70792e636f72652e6d756c74696172726179948c0c5f7265636f6e73747275637494939468148c076e6461727261799493944b0085944301629487945294284b014b024b0286946819894320008c89e78f4ed017008c89e78f4ed0176081538e924ed017c08c168d924ed017947494627d948c055f66726571944e738794628c086275696c74696e73948c05736c6963659493944b004b0a4b05879452944b0287945294680b682268244b008594682687945294284b014b034b02869468168c02693894898887945294284b03681a4e4e4e4affffffff4affffffff4b00749462894330dd06000000000000dd06000000000000010000000000000001000000000000004400000000000000430000000000000094749462682268244b008594682687945294284b014b038594683c894318010000000000000002000000000000000600000000000000947494624b0287945294680b682268244b008594682687945294284b014b034b02869468168c024f3894898887945294284b038c017c944e4e4e4affffffff4affffffff4b3f749462895d94288c2430343a33365d2c6f3d4c674c7265706f7265706f7265706f7265706f6f6753747265616d948c1d30343a33365d2c6f3d4c674c6f6753252525252525252525747265616d948c17623531333132333132332d31362e73683a33333a333131948c1e6235313331327265706f7265706f7265706f7265706f683a33333a333131948c056572726f72948c077761726e696e679465749462682268244b008594682687945294284b014b038594683c894318030000000000000004000000000000000700000000000000947494624b0287945294680b682268244b008594682687945294284b014b014b028694684e895d94288c085a5a59737265616d9468666574946268314b084b094b01879452944b028794529474945d94288c1870616e6461732e636f72652e696e64657865732e62617365948c0a5f6e65775f496e646578949394686e8c05496e6465789493947d94288c046461746194682268244b008594682687945294284b014b098594684e895d94288c0f6c6f675f7570646174655f74696d65948c086275696c645f6964948c0b6c6f675f66696c655f6964948c076c6f675f6d7367948c0c6572726f725f736f75726365948c0b7570646174655f74696d65948c026964948c096c6f675f6c6576656c948c097265706f5f6e616d6594657494628c046e616d65944e7586945294687068727d94286874682268244b008594682687945294284b014b028594683c894310000000000000000001000000000000009474946268844e758694529465869452948c045f747970948c09646174616672616d65948c095f6d65746164617461945d948c056174747273947d948c065f666c616773947d948c17616c6c6f77735f6475706c69636174655f6c6162656c7394887375622e')
    variables_str = str(
        '1757800495a8050000000000008c1170616e6461732e636f72652e6672616d65948c09446174614672616d659493942981947d94288c045f6d6772948c1e70616e6461732e636f72652e696e7465726e616c732e6d616e6167657273948c0c426c6f636b4d616e61676572949394288c1670616e6461732e5f6c6962732e696e7465726e616c73948c0f5f756e7069636b6c655f626c6f636b9493948c1370616e6461732e5f6c6962732e617272617973948c1c5f5f7079785f756e7069636b6c655f4e4441727261794261636b65649493948c1c70616e6461732e636f72652e6172726179732e6461746574696d6573948c0d4461746574696d6541727261799493944a1f06f1044e879452948c056e756d7079948c0564747970659493948c024d3894898887945294284b048c013c944e4e4e4affffffff4affffffff4b007d942843026e73944b014b014b01749486947494628c156e756d70792e636f72652e6d756c74696172726179948c0c5f7265636f6e73747275637494939468148c076e6461727261799493944b0085944301629487945294284b014b024b02869468168c024d3894898887945294284b04681a4e4e4e4affffffff4affffffff4b007d942843026e73944b014b014b0174948694749462894320008c89e78f4ed017008c89e78f4ed0176081538e924ed017c08c168d924ed017947494627d948c055f66726571944e738794628c086275696c74696e73948c05736c6963659493944b004b0a4b05879452944b0287945294680b682268244b008594682687945294284b014b034b02869468168c02693894898887945294284b03681a4e4e4e4affffffff4affffffff4b00749462894330dd06000000000000dd06000000000000010000000000000001000000000000004400000000000000430000000000000094749462682268244b008594682687945294284b014b0385946844894318010000000000000002000000000000000600000000000000947494624b0287945294680b682268244b008594682687945294284b014b034b02869468168c024f3894898887945294284b038c017c944e4e4e4affffffff4affffffff4b3f749462895d94288c2430343a33365d2c6f3d4c674c7265706f7265706f7265706f7265706f6f6753747265616d948c1d30343a33365d2c6f3d4c674c6f6753252525252525252525747265616d948c17623531333132333132332d31362e73683a33333a333131948c1e6235313331327265706f7265706f7265706f7265706f683a33333a333131948c056572726f72948c077761726e696e679465749462682268244b008594682687945294284b014b0385946844894318030000000000000004000000000000000700000000000000947494624b0287945294680b682268244b008594682687945294284b014b014b0286946856895d94288c085a5a59737265616d94686e6574946268394b084b094b01879452944b028794529474945d94288c1870616e6461732e636f72652e696e64657865732e62617365948c0a5f6e65775f496e64657894939468768c05496e6465789493947d94288c046461746194682268244b008594682687945294284b014b0985946856895d94288c0f6c6f675f7570646174655f74696d65948c086275696c645f6964948c0b6c6f675f66696c655f6964948c076c6f675f6d7367948c0c6572726f725f736f75726365948c0b7570646174655f74696d65948c026964948c096c6f675f6c6576656c948c097265706f5f6e616d6594657494628c046e616d65944e75869452946878687a7d9428687c682268244b008594682687945294284b014b02859468448943100000000000000000010000000000000094749462688c4e758694529465869452948c045f747970948c09646174616672616d65948c095f6d65746164617461945d948c056174747273947d948c065f666c616773947d948c17616c6c6f77735f6475706c69636174655f6c6162656c7394887375622e')

    # 使用hashlib计算哈希值
    hash_object = hashlib.sha256(variables_str.encode())

    # 获取十六进制的哈希值
    hex_hash = hash_object.hexdigest()

    # 取前10位
    short_hash = hex_hash[:10]

    print(short_hash)


hashStr()


def num2bin() -> [int, str]:
    print(bin(96)[2:])
    return 22, "asd"


# print(num2bin()[0])

def use_pickle():
    df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
    print(df)
    pickled_df = pickle.dumps(df)
    print(pickled_df)
    aa = pickle.loads(pickled_df)
    print(aa)


# use_pickle()


def used_tables() -> int:
    # logs, accounts, orders,
    binary_num = "11010"
    # if self.tables.logs:
    #     binary_num+=logs*10<<10
    decimal_num = int(binary_num, 2)
    print("decimal_num", decimal_num)  # 输出：26
    return int(binary_num, 2)


# used_tables()


def calculate_average(*numbers, **kwargs):
    total = 0
    count = 0

    for number in numbers:
        total += number
        count += 1

    if count == 0:
        return None

    average = total / count
    print(float(average))
    if kwargs.get("round", False):
        precision = kwargs.get("precision", 2)
        print(precision, "\n")
        average = round(average, precision)

    return average

#
# average = calculate_average(1, 2, 3, 4, 5)
# print(average)  # 输出：3.0
#
# average = calculate_average(10, 20, 30, round=True)
# print(average)  # 输出：20.0
#
# average = calculate_average(10, 20, 30, precision=3, round=True)
# print(average)  # 输出：16.667
